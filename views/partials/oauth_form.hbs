<div class="card mb-4">

    <div class="card-body">

        <div class="form-group">

            <label for="name">
                Application name
            </label>

            {{#if appData.legacy}}
            <input type="text" class="form-control {{#if errors.name}}is-invalid{{/if}}" id="name"
                value="{{appData.name}}" placeholder="Enter application name, eg. &quot;My App&quot;&mldr;" disabled />
            {{else}}
            <input type="text" class="form-control {{#if errors.name}}is-invalid{{/if}}" id="name" name="name"
                value="{{values.name}}" placeholder="Enter application name, eg. &quot;My App&quot;&mldr;" required />
            {{/if}}

            {{#if errors.name}}
            <span class="invalid-feedback">{{errors.name}}</span>
            {{/if}}
            <small class="form-text text-muted">Application name used when listing apps.</small>
        </div>

        <div class="form-group">

            <label for="description">
                Description
            </label>

            {{#if appData.legacy}}
            <input type="text" class="form-control {{#if errors.description}}is-invalid{{/if}}" id="description"
                value="{{appData.description}}" placeholder="" disabled />
            {{else}}
            <input type="text" class="form-control {{#if errors.description}}is-invalid{{/if}}" id="description"
                name="description" value="{{values.description}}" placeholder="" />
            {{/if}}

            {{#if errors.description}}
            <span class="invalid-feedback">{{errors.description}}</span>
            {{/if}}
            <small class="form-text text-muted">Optional application description or a comment.</small>
        </div>

        {{#unless activeGmailService}}
        <div class="form-group">

            <label for="title">
                Display title
            </label>

            {{#if appData.legacy}}
            <input type="text" class="form-control {{#if errors.title}}is-invalid{{/if}}" id="title"
                value="{{appData.title}}" placeholder="" disabled />
            {{else}}
            <input type="text" class="form-control {{#if errors.title}}is-invalid{{/if}}" id="title" name="title"
                value="{{values.title}}" placeholder="" />
            {{/if}}

            {{#if errors.title}}
            <span class="invalid-feedback">{{errors.title}}</span>
            {{/if}}
            <small class="form-text text-muted">Optional display title next to the application button on the account
                type selection page.</small>
        </div>
        {{/unless}}


        {{#if activeGmail}}
        <div class="form-group form-check">

            <input type="checkbox" class="form-check-input {{#if errors.googleWorkspaceAccounts}}is-invalid{{/if}}"
                id="googleWorkspaceAccounts" name="googleWorkspaceAccounts" {{#if
                values.googleWorkspaceAccounts}}checked{{/if}} />
            <label class="form-check-label" for="googleWorkspaceAccounts">Show only Google Workspace accounts on the
                OAuth2 login page</label>
            {{#if errors.googleWorkspaceAccounts}}
            <span class="invalid-feedback">{{errors.googleWorkspaceAccounts}}</span>
            {{/if}}
            <small class="form-text text-muted">When enabled, only Google Workspace accounts will be available on the
                Gmail OAuth2 login screen.</small>
        </div>
        {{/if}}

        {{#unless activeGmailService}}
        <div class="form-group form-check">

            <input type="checkbox" class="form-check-input {{#if errors.enabled}}is-invalid{{/if}}" id="enabled"
                name="enabled" {{#if values.enabled}}checked{{/if}} />
            <label class="form-check-label" for="enabled">Enable this app</label>
            {{#if errors.enabled}}
            <span class="invalid-feedback">{{errors.enabled}}</span>
            {{/if}}
            <small class="form-text text-muted">If enabled, then this OAuth2 app is shown as an
                account type option in the hosted authentication form.</small>
        </div>
        {{/unless}}

    </div>
</div>

<div class="card mb-4">

    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">OAuth2 Credentials</h6>
    </div>

    <div class="card-body">

        {{#if activeGmailService}}

        <div class="form-group">
            <button type="button" class="btn btn-info btn-icon-split" id="serviceFile">
                <span class="icon text-white-50">
                    <i class="fas fa-cloud-upload-alt"></i>
                </span>
                <span class="text">Load configuration from the service key file&#x2026;</span>
            </button>
            <small class="form-text text-muted">Select the JSON file you received after generating a new service key to
                retrieve the service values.</small>
        </div>

        <div class="form-group">
            <label for="googleProjectId">
                Google Cloud Project ID
            </label>
            <input type="text" class="form-control {{#if errors.googleProjectId}}is-invalid{{/if}}" id="googleProjectId"
                name="googleProjectId" value="{{values.googleProjectId}}"
                placeholder="Enter the Google Cloud Project ID of the service, for example &quot;project-name-425411&quot;"
                required />
            {{#if errors.googleProjectId}}
            <span class="invalid-feedback">{{errors.googleProjectId}}</span>
            {{/if}}
            <small class="form-text text-muted">OAuth2 Service Project ID</small>
        </div>

        <div class="form-group">
            <label for="serviceClientEmail">
                Client Email
            </label>
            <input type="email" class="form-control {{#if errors.serviceClientEmail}}is-invalid{{/if}}"
                id="serviceClientEmail" name="serviceClientEmail" value="{{values.serviceClientEmail}}"
                placeholder="Enter the principal of the service, for example &quot;name@project-123.iam.gserviceaccount.com&quot;"
                required />
            {{#if errors.serviceClientEmail}}
            <span class="invalid-feedback">{{errors.serviceClientEmail}}</span>
            {{/if}}
            <small class="form-text text-muted">OAuth2 Service Client Email</small>
        </div>

        <div class="form-group">
            <label for="serviceClient">
                Service client
            </label>
            <input type="text" class="form-control {{#if errors.serviceClient}}is-invalid{{/if}}" id="serviceClient"
                name="serviceClient" value="{{values.serviceClient}}" placeholder="Enter service client ID&mldr;"
                required />
            {{#if errors.serviceClient}}
            <span class="invalid-feedback">{{errors.serviceClient}}</span>
            {{/if}}
            <small class="form-text text-muted">OAuth2 Service Client ID</small>
        </div>

        <div class="form-group">

            <label for="serviceKey">Secret service key</label>

            <textarea class="form-control droptxt autoselect {{#if errors.serviceKey}}is-invalid{{/if}}" id="serviceKey"
                name="serviceKey" rows="4" data-enable-grammarly="false" spellcheck="false" {{#if
                hasServiceKey}}placeholder="Service key is set but not shown&mldr;" {{else}}
                placeholder="Starts with &quot;-----BEGIN PRIVATE KEY-----&quot;&mldr;" {{/if}} {{#unless
                hasServiceKey}}required{{/unless}}>{{values.serviceKey}}</textarea>
            {{#if errors.serviceKey}}
            <span class="invalid-feedback">{{errors.serviceKey}}</span>
            {{/if}}
        </div>

        {{else}}

        {{#if activeGmail}}

        <div class="form-group">
            <button type="button" class="btn btn-info btn-icon-split" id="gmailConfigFile">
                <span class="icon text-white-50">
                    <i class="fas fa-cloud-upload-alt"></i>
                </span>
                <span class="text">Load configuration from the JSON file&#x2026;</span>
            </button>
            <small class="form-text text-muted">Select the JSON file you can download when viewing client credential
                information in Google Cloud Console.</small>
        </div>

        <div class="form-group">
            <label for="googleProjectId">
                Google Cloud Project ID
            </label>
            <input type="text" class="form-control {{#if errors.googleProjectId}}is-invalid{{/if}}" id="googleProjectId"
                name="googleProjectId" value="{{values.googleProjectId}}"
                placeholder="Enter the Google Cloud Project ID of the service, for example &quot;project-name-425411&quot;" />
            {{#if errors.googleProjectId}}
            <span class="invalid-feedback">{{errors.googleProjectId}}</span>
            {{/if}}
            <small class="form-text text-muted">OAuth2 Project ID</small>
        </div>

        {{/if}}

        <div class="form-group">

            <label for="clientId">
                {{#if activeGmail}}
                Client Id
                {{/if}}

                {{#if activeMailRu}}
                Client Id
                {{/if}}

                {{#if activeOutlook}}
                Azure Application Id
                {{/if}}
            </label>
            <input type="text" class="form-control {{#if errors.clientId}}is-invalid{{/if}}" id="clientId"
                name="clientId" value="{{values.clientId}}" placeholder="Enter client ID&mldr;" required />
            {{#if errors.clientId}}
            <span class="invalid-feedback">{{errors.clientId}}</span>
            {{/if}}
            <small class="form-text text-muted">OAuth2 client id.</small>
        </div>

        <div class="form-group">

            <label for="clientSecret">Client Secret</label>

            <input type="text" class="form-control {{#if errors.clientSecret}}is-invalid{{/if}}" id="clientSecret"
                name="clientSecret" value="{{values.clientSecret}}" {{#if hasClientSecret}}
                placeholder="Client secret is set but not shown&mldr;" {{else}} placeholder="Enter client secret&mldr;"
                {{/if}} {{#unless hasClientSecret}}required{{/unless}} />
            {{#if errors.clientSecret}}
            <span class="invalid-feedback">{{errors.clientSecret}}</span>
            {{/if}}
            <small class="form-text text-muted">OAuth2 client secret.</small>
        </div>

        {{#if activeOutlook}}

        <div class="form-group">
            <label for="cloud">Azure cloud environment</label>
            <select class="custom-select custom-select-sm {{#if errors.cloud}}is-invalid{{/if}}" id="cloud" name="cloud"
                required>

                {{#each azureClouds}}
                <option value="{{id}}" {{#if selected}}selected{{/if}}>{{name}}{{#if
                    description}} &mdash;
                    {{description}}{{/if}}</option>
                {{/each}}
            </select>
            {{#if errors.cloud}}
            <span class="invalid-feedback">{{errors.cloud}}</span>
            {{/if}}
            <small class="form-text text-muted">Accounts hosted in different cloud environments use different OAuth2
                endpoints and scopes.</small>
        </div>

        {{/if}}

        {{#if activeOutlook}}

        <label for="clientSecret">Supported account types</label>

        <div class="form-check">
            <input class="form-check-input r-auth" type="radio" name="authority" id="authorityOrganizations"
                value="organizations" {{#if authorityOrganizations}}checked{{/if}}>
            <label class="form-check-label" for="authorityOrganizations">
                Accounts in any organizational directory (Any Microsoft Entra ID tenant - Multitenant)
            </label>
        </div>

        <div class="form-check">
            <input class="form-check-input r-auth" type="radio" name="authority" id="authorityCommon" value="common"
                {{#if authorityCommon}}checked{{/if}}>
            <label class="form-check-label" for="authorityCommon">
                Accounts in any organizational directory (Any Microsoft Entra ID tenant - Multitenant) and personal
                Microsoft accounts (e.g. Skype, Xbox)
            </label>
        </div>

        <div class="form-check">
            <input class="form-check-input r-auth" type="radio" name="authority" id="authorityConsumers"
                value="consumers" {{#if authorityConsumers}}checked{{/if}}>
            <label class="form-check-label" for="authorityConsumers">
                Personal Microsoft accounts only
            </label>
        </div>

        <div class="form-check">
            <input class="form-check-input r-auth" type="radio" name="authority" id="authorityTenant" value="tenant"
                {{#if authorityTenant}}checked{{/if}}>
            <label class="form-check-label" for="authorityTenant">
                Accounts in the specified organizational directory only (Single tenant)
            </label>
        </div>

        <div class="form-group mt-3">
            <label for="tenant">Directory (tenant) ID</label>

            <input type="text" class="form-control {{#if errors.tenant}}is-invalid{{/if}}" id="tenant" name="tenant"
                value="{{values.tenant}}" />
            {{#if errors.tenant}}
            <span class="invalid-feedback">{{errors.tenant}}</span>
            {{/if}}
            <small class="form-text text-muted">Fill this value if you checked "Accounts in the specified organizational
                directory only" above. The Directory ID is a UUID value like
                &quot;f8cdef31-a31e-4b4a-93e4-5f571e91255a&quot;</small>
        </div>
        {{/if}}



        <div class="form-group">
            <label for="redirectUrl">Redirect URL</label>
            <input type="url" class="form-control {{#if errors.redirectUrl}}is-invalid{{/if}}" id="redirectUrl"
                name="redirectUrl" value="{{values.redirectUrl}}" required />
            {{#if errors.redirectUrl}}
            <span class="invalid-feedback">{{errors.redirectUrl}}</span>
            {{/if}}
            <small class="form-text text-muted">Redirect URL for OAuth2. If you are using EmailEngine's OAuth2 flow,
                then set it to <code>{{defaultRedirectUrl}}</code></small>
        </div>
        {{/if}}

    </div>
</div>

{{#if activeGmailService}}

<div class="card mb-4">

    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Base scopes</h6>
    </div>

    <table class="table">

        <thead>
            <tr>
                <th>Type</th>
                <th>Description</th>
                <th>Requirements</th>

            </tr>

        </thead>
        <tbody>

            {{#if actionCreate}}
            <tr>
                <td>
                    <div class="form-check">
                        <input class="form-check-input base-scopes-radio" type="radio" name="baseScopes"
                            id="baseScopesImap" value="imap" {{#if baseScopesImap}}checked{{/if}}>
                        <label class="form-check-label" for="baseScopesImap">
                            IMAP and SMTP
                        </label>
                    </div>
                </td>
                <td>Regular email protocols</td>
                <td><code>"https://mail.google.com/"</code> consent screen scope</td>

            </tr>
            <tr>
                <td>
                    <div class="form-check">
                        <input class="form-check-input base-scopes-radio" type="radio" name="baseScopes"
                            id="baseScopesPubsub" value="pubsub" {{#if baseScopesPubsub}}checked{{/if}}>
                        <label class="form-check-label" for="baseScopesPubsub">
                            Cloud Pub/Sub <span class="badge badge-dark">beta</span>
                        </label>
                    </div>
                </td>
                <td>Webhook management</td>
                <td><code>"Pub/Sub Admin"</code> service credentials role</td>

            </tr>

            {{else}}
            {{#if baseScopesImap}}
            <tr>
                <td>
                    <strong>IMAP and SMTP</strong>
                </td>
                <td>Regular email protocols</td>
                <td><code>"https://mail.google.com/"</code> consent screen scope</td>

            </tr>
            {{/if}}

            {{#if baseScopesPubsub}}
            <tr>
                <td>
                    <strong>Cloud Pub/Sub</strong> <span class="badge badge-dark">beta</span>
                </td>
                <td>Webhook management</td>
                <td><code>"Pub/Sub Admin"</code> service credentials role</td>

            </tr>
            {{/if}}

            {{/if}}
        </tbody>

    </table>

    <div id="select-pubsub-app" class="card-footer {{#unless baseScopesPubsub}}d-none{{/unless}}">

        {{#if actionCreate}}

        <div class="form-group">
            <label for="googleTopicName">
                Google Pub/Sub Topic Name
            </label>
            <input type="text" class="form-control {{#if errors.googleTopicName}}is-invalid{{/if}}" id="googleTopicName"
                name="googleTopicName" value="{{values.googleTopicName}}"
                placeholder="Enter the Topic Name for the Google Pub/Sub subscription, for example &quot;ee-pub-12345&quot;" />
            {{#if errors.googleTopicName}}
            <span class="invalid-feedback">{{errors.googleTopicName}}</span>
            {{/if}}
            <small class="form-text text-muted">OAuth2 Pub/Sub Topic Name. Automatically generated if not set.</small>
        </div>

        <div class="form-group">
            <label for="googleSubscriptionName">
                Google Pub/Sub Subscription Name
            </label>
            <input type="text" class="form-control {{#if errors.googleSubscriptionName}}is-invalid{{/if}}"
                id="googleSubscriptionName" name="googleSubscriptionName" value="{{values.googleSubscriptionName}}"
                placeholder="Enter the Subscription Name for the Google Pub/Sub subscription, for example &quot;ee-sub-12345&quot;" />
            {{#if errors.googleSubscriptionName}}
            <span class="invalid-feedback">{{errors.googleSubscriptionName}}</span>
            {{/if}}
            <small class="form-text text-muted">OAuth2 Pub/Sub Subscription Name. Automatically generated if not
                set.</small>
        </div>

        {{else}}

        <dl class="row">

            <dt class="col-sm-3">Pub/Sub Topic</dt>
            <dd class="col-sm-9">
                {{#if appData.pubSubTopic}}

                <code>{{lastVal appData.pubSubTopic "/"}}</code>
                {{else}}
                Not initialized
                {{/if}}
            </dd>


            <dt class="col-sm-3">Pub/Sub Subscription</dt>
            <dd class="col-sm-9">
                {{#if appData.pubSubSubscription}}
                <code>{{lastVal appData.pubSubSubscription "/"}}</code>
                {{else}}
                Not initialized
                {{/if}}
            </dd>
        </dl>


        {{/if}}

    </div>

</div>
{{/if}}

{{#if activeGmail}}

<div class="card mb-4">

    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Base scopes</h6>
    </div>


    <table class="table">

        <thead>
            <tr>
                <th>Type</th>
                <th>Description</th>
                <th>Requirements</th>
            </tr>

        </thead>
        <tbody>

            {{#if actionCreate}}
            <tr>
                <td>
                    <div class="form-check">
                        <input class="form-check-input base-scopes-radio" type="radio" name="baseScopes"
                            id="baseScopesImap" value="imap" {{#if baseScopesImap}}checked{{/if}}>
                        <label class="form-check-label" for="baseScopesImap">
                            IMAP and SMTP
                        </label>
                    </div>
                </td>
                <td>Regular email protocols</td>
                <td><code>"https://mail.google.com/"</code> consent screen scope</td>

            </tr>
            <tr>
                <td>
                    <div class="form-check">
                        <input class="form-check-input base-scopes-radio" type="radio" name="baseScopes"
                            id="baseScopesAPI" value="api" {{#if baseScopesApi}}checked{{/if}}>
                        <label class="form-check-label" for="baseScopesAPI">
                            Gmail API <span class="badge badge-dark">beta</span>
                        </label>
                    </div>
                </td>
                <td>Gmail HTTP API</td>
                <td><code>"/auth/gmail.modify"</code> consent screen scope</td>

            </tr>

            {{else}}

            {{#if baseScopesImap}}
            <tr>
                <td>
                    <strong>IMAP and SMTP</strong>
                </td>
                <td>Regular email protocols</td>
                <td><code>"https://mail.google.com/"</code> consent screen scope</td>

            </tr>
            {{/if}}

            {{#if baseScopesApi}}
            <tr>
                <td>
                    <strong>Gmail API</strong> <span class="badge badge-dark">beta</span>
                </td>
                <td>Gmail HTTP API</td>
                <td><code>"/auth/gmail.modify"</code> consent screen scope</td>

            </tr>
            {{/if}}

            {{/if}}
        </tbody>
    </table>

    <div id="select-pubsub-app" class="card-footer {{#unless baseScopesApi}}d-none{{/unless}}">

        <p>
            To enable webhooks for email accounts managed by this app, EmailEngine needs to set up a Cloud Pub/Sub
            service using a Gmail Service Account with the <em>Pub/Sub Admin</em> role. Select the Gmail Pub/Sub Service
            Account below to configure this.
        </p>

        <p>
            <strong>Note:</strong> This is optional but recommended. Without a configured Pub/Sub service account,
            EmailEngine will not
            detect or send webhooks for new, updated, or deleted emails, and will not detect bounces. Send-only accounts
            don't require this.
        </p>

        <label for="pubSubApp">Select service account to manage webhooks (optional). The service account must be for the
            same
            Google Cloud Project.</label>
        <select class="custom-select custom-select-sm {{#if
            errors.pubSubApp}}is-invalid{{/if}}" id="pubSubApp" name="pubSubApp" {{#unless
            baseScopesApi}}disabled{{/unless}}>

            <option value=""> &mdash; Select the service account for your project &mdash; </option>

            {{#each pubSubApps}}
            <option value="{{id}}" data-project="{{googleProjectId}}" {{#if selected}}selected{{/if}} {{#unless
                baseScopesApi}}disabled{{/unless}}>{{name}}{{#if
                description}} &mdash;
                {{description}}{{/if}} [{{googleProjectId}}]</option>
            {{/each}}

        </select>
        {{#if errors.pubSubApp}}
        <span class="invalid-feedback">{{errors.pubSubApp}}</span>
        {{/if}}
        </td>
    </div>

</div>
{{/if}}


{{#if activeOutlook}}

<div class="card mb-4">

    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Base scopes</h6>
    </div>


    <table class="table">

        <thead>
            <tr>
                <th>Type</th>
                <th>Description</th>
                <th>Requirements</th>
            </tr>

        </thead>
        <tbody>

            {{#if actionCreate}}
            <tr>
                <td>
                    <div class="form-check">
                        <input class="form-check-input base-scopes-radio" type="radio" name="baseScopes"
                            id="baseScopesImap" value="imap" {{#if baseScopesImap}}checked{{/if}}>
                        <label class="form-check-label" for="baseScopesImap">
                            IMAP and SMTP
                        </label>
                    </div>
                </td>
                <td>Regular email protocols</td>
                <td><code>"IMAP.AccessAsUser.All"</code> and <code>"SMTP.Send"</code> consent screen scopes</td>

            </tr>
            <tr>
                <td>
                    <div class="form-check">
                        <input class="form-check-input base-scopes-radio" type="radio" name="baseScopes"
                            id="baseScopesAPI" value="api" {{#if baseScopesApi}}checked{{/if}}>
                        <label class="form-check-label" for="baseScopesAPI">
                            MS Graph API <span class="badge badge-dark">beta</span>
                        </label>
                    </div>
                </td>
                <td>Microsoft HTTP API</td>
                <td><code>"Mail.ReadWrite"</code> and <code>"Mail.Send"</code> consent screen scopes</td>

            </tr>

            {{else}}

            {{#if baseScopesImap}}
            <tr>
                <td>
                    <strong>IMAP and SMTP</strong>
                </td>
                <td>Regular email protocols</td>
                <td><code>"IMAP.AccessAsUser.All"</code> and <code>"SMTP.Send"</code> consent screen scopes</td>

            </tr>
            {{/if}}

            {{#if baseScopesApi}}
            <tr>
                <td>
                    <strong>MS Graph API</strong> <span class="badge badge-dark">beta</span>
                </td>
                <td>Microsoft HTTP API</td>
                <td><code>"Mail.ReadWrite"</code> and <code>"Mail.Send"</code> consent screen scopes</td>

            </tr>
            {{/if}}

            {{/if}}
        </tbody>
    </table>

    <div id="select-pubsub-app" class="card-footer {{#unless baseScopesApi}}d-none{{/unless}}">

        <p>Microsoft Graph delivers change notifications to EmailEngine at these two endpoints:</p>

        <pre><code>{{mainServiceUrl}}/oauth/msg/lifecycle
{{mainServiceUrl}}/oauth/msg/notification</code></pre>

        <p>
            Both endpoints must be publicly reachable for anonymous HTTPS
            <strong>POST</strong> requests. When a notification arrives, EmailEngine
            immediately forwards the event to your application through its own webhooks.
        </p>

        <p>
            If your EmailEngine instance cannot be exposed directly, configure a public
            proxy domain in <span class="text-muted code-link"><a href="/admin/swagger#/Settings/postV1Settings"
                    target="_blank" rel="noopener noreferrer">notificationBaseUrl</a></span>. Microsoft Graph will then
            post to <code>https://&lt;proxy-domain&gt;/oauth/msg/...</code> instead of
            <code>{{mainServiceUrl}}</code>.
        </p>


    </div>
</div>

{{/if}}

{{#if activeGmail}}
<div class="card mb-4 {{#unless baseScopesApi}}d-none{{/unless}}" id="account-type-card-gmail">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Account Type Helper</h6>
    </div>
    <div class="card-body">
        <p>Click a button to automatically populate the scope fields with preset configurations:</p>

        <div class="btn-group btn-group-sm mb-3" role="group">
            <button type="button" class="btn btn-outline-primary account-type-btn" data-type="normal"
                data-provider="gmail">
                Normal (Full Access)
            </button>
            <button type="button" class="btn btn-outline-primary account-type-btn" data-type="readonly"
                data-provider="gmail">
                Read-Only
            </button>
            <button type="button" class="btn btn-outline-primary account-type-btn" data-type="readonlysend"
                data-provider="gmail">
                Read-Only + Send
            </button>
            <button type="button" class="btn btn-outline-primary account-type-btn" data-type="sendonly"
                data-provider="gmail">
                Send-Only
            </button>
        </div>

        <div class="mt-2">
            <small class="text-muted">
                <strong>Normal:</strong> Default Gmail API scopes for full mailbox access<br>
                <strong>Read-Only:</strong> Uses <code>gmail.readonly</code> scope for read-only access (no send)<br>
                <strong>Read-Only + Send:</strong> Uses <code>gmail.readonly</code> and <code>gmail.send</code>
                scopes<br>
                <strong>Send-Only:</strong> Uses <code>gmail.send</code> scope only. Does not require privileged scope
                approval from Google.
            </small>
        </div>

        <div class="alert alert-info mt-3 mb-0">
            <p class="mb-2"><strong>Tip:</strong> Send-only accounts are useful when you only need to send emails and don't want to
            request privileged scopes that require Google verification.</p>
            <p class="mb-0"><strong>Important limitation:</strong> Messages sent through send-only accounts cannot be tracked by EmailEngine.
            The Gmail API modifies the Message-ID header when sending emails, and without read permissions,
            EmailEngine cannot resolve the new Message-ID assigned by Gmail. This means delivery status and bounce
            notifications may not be accurately associated with the sent message.</p>
        </div>
    </div>
</div>
{{/if}}

{{#if activeOutlook}}
<div class="card mb-4 {{#unless baseScopesApi}}d-none{{/unless}}" id="account-type-card-outlook">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Account Type Helper</h6>
    </div>
    <div class="card-body">
        <p>Click a button to automatically populate the scope fields with preset configurations:</p>

        <div class="btn-group btn-group-sm mb-3" role="group">
            <button type="button" class="btn btn-outline-primary account-type-btn" data-type="normal"
                data-provider="outlook">
                Normal (Full Access)
            </button>
            <button type="button" class="btn btn-outline-primary account-type-btn" data-type="readonly"
                data-provider="outlook">
                Read-Only
            </button>
            <button type="button" class="btn btn-outline-primary account-type-btn" data-type="readonlysend"
                data-provider="outlook">
                Read-Only + Send
            </button>
            <button type="button" class="btn btn-outline-primary account-type-btn" data-type="sendonly"
                data-provider="outlook">
                Send-Only
            </button>
        </div>

        <div class="mt-2">
            <small class="text-muted">
                <strong>Normal:</strong> Default MS Graph API scopes for full mailbox access<br>
                <strong>Read-Only:</strong> Uses <code>Mail.Read</code> scope for read-only access (no send)<br>
                <strong>Read-Only + Send:</strong> Uses <code>Mail.Read</code> with <code>Mail.Send</code> enabled<br>
                <strong>Send-Only:</strong> Uses <code>Mail.Send</code> scope only (disables
                <code>Mail.ReadWrite</code>)
            </small>
        </div>
    </div>
</div>
{{/if}}

<div class="card mb-4">
    <a href="#setupScopes" class="d-block card-header py-3 {{#unless values.extraScopes}} collapsed{{/unless}}"
        data-toggle="collapse" role="button" aria-expanded="true" aria-controls="setupScopes">
        <h6 class="m-0 font-weight-bold text-primary">Additional scopes</h6>
    </a>
    <div class="collapse {{#if values.extraScopes}} show{{/if}}" id="setupScopes">
        <div class="card-body">

            <p>Here you can list additional OAuth2 scopes that EmailEngine should ask for. This is mainly needed
                when you want to re-use the access tokens generated by EmailEngine in other parts of your
                application.</p>

            {{#if activeGmail}}
            <div class="alert alert-info">
                <p>When adding new scopes, ensure that related APIs are
                    enabled for your OAuth2 app (look for <em>Enabled APIs & services</em> in <a
                        href="https://console.cloud.google.com/apis/dashboard" target="_blank" rel="noopener noreferrer"
                        referrerpolicy="no-referrer">Google Cloud Console</a>)
                    before registering accounts with these permissions. Otherwise, token generations will fail.</p>
            </div>
            {{/if}}

            {{#if activeGmailService}}
            <div class="alert alert-info">When adding new scopes, ensure that related APIs are
                enabled for your OAuth2 app (look for <em>Enabled APIs & services</em> in <a
                    href="https://console.cloud.google.com/apis/dashboard" target="_blank" rel="noopener noreferrer"
                    referrerpolicy="no-referrer">Google Cloud Console</a>)
                before registering accounts with these permissions. Otherwise, token generations will fail.
            </div>
            {{/if}}

            {{#if activeOutlook}}
            <div class="alert alert-info">

                {{#if baseScopesImap}}
                All scopes must come exclusively from <code>https://outlook.office.com/</code>; scopes from
                <code>https://graph.microsoft.com/</code> are not allowed.
                {{/if}}

                {{#if baseScopesApi}}
                All scopes must come exclusively from <code>https://graph.microsoft.com/</code>; scopes from
                <code>https://outlook.office.com/</code> are not allowed.
                {{/if}}

                You cannot mix APIs from different endpoints within a single application.


            </div>
            {{/if}}

            <div class="form-group">
                <label for="extraScopes">List of OAuth2 scopes</label>

                <textarea class="form-control text-monospace {{#if errors.extraScopes}}is-invalid{{/if}}"
                    id="extraScopes" name="extraScopes" rows="5" spellcheck="false" data-enable-grammarly="false"
                    placeholder="Scope identifiers like &quot;https://mail.google.com/&quot;&mldr;">{{values.extraScopes}}</textarea>
                {{#if errors.extraScopes}}
                <span class="invalid-feedback">{{errors.extraScopes}}</span>
                {{/if}}
                <small class="form-text text-muted">Keep one scope per line</small>
            </div>

        </div>
    </div>
</div>

<div class="card mb-4">
    <a href="#skipScopes" class="d-block card-header py-3 {{#unless values.skipScopes}} collapsed{{/unless}}"
        data-toggle="collapse" role="button" aria-expanded="true" aria-controls="setupScopes">
        <h6 class="m-0 font-weight-bold text-primary">Disabled scopes</h6>
    </a>
    <div class="collapse {{#if values.skipScopes}} show{{/if}}" id="skipScopes">
        <div class="card-body">

            <p>Here you can list OAuth2 scopes that EmailEngine should not use. This is mainly needed
                when you want to disable some default scopes like <code>"SMTP.Send"</code> in Outlook or
                <code>"https://www.googleapis.com/auth/gmail.modify"</code> in Gmail.
            </p>

            <div class="form-group">
                <label for="skipScopes">List of disabled OAuth2 scopes</label>

                <textarea class="form-control text-monospace {{#if errors.skipScopes}}is-invalid{{/if}}" id="skipScopes"
                    name="skipScopes" rows="5" spellcheck="false" data-enable-grammarly="false"
                    placeholder="Scope identifiers like &quot;SMTP.Send&quot;&mldr;">{{values.skipScopes}}</textarea>
                {{#if errors.skipScopes}}
                <span class="invalid-feedback">{{errors.skipScopes}}</span>
                {{/if}}
                <small class="form-text text-muted">Keep one scope per line</small>
            </div>

        </div>
    </div>
</div>

<script>

    document.addEventListener('DOMContentLoaded', () => {

        const projectIdElm = document.getElementById('googleProjectId');
        const pubSubAppElm = document.getElementById('pubSubApp');

        /**
         * Checks and updates the visibility of scope-related UI elements based on selected base scopes radio button.
         * Handles both API and Pub/Sub scope selections, showing/hiding relevant configuration sections.
         */
        function checkScopesRadio() {
            let baseScopesAPIElm = document.getElementById('baseScopesAPI');
            let baseScopesPubsubElm = document.getElementById('baseScopesPubsub');
            let selectPubsubAppElm = document.getElementById('select-pubsub-app');
            let accountTypeCardGmail = document.getElementById('account-type-card-gmail');
            let accountTypeCardOutlook = document.getElementById('account-type-card-outlook');

            if (baseScopesAPIElm && selectPubsubAppElm) {
                if (baseScopesAPIElm.checked) {
                    selectPubsubAppElm.classList.remove('d-none');
                    if (pubSubAppElm) {
                        pubSubAppElm.disabled = false;
                    }
                } else {
                    selectPubsubAppElm.classList.add('d-none');
                    if (pubSubAppElm) {
                        pubSubAppElm.disabled = true;
                    }
                }
            }

            if (baseScopesPubsubElm && selectPubsubAppElm) {
                if (baseScopesPubsubElm.checked) {
                    selectPubsubAppElm.classList.remove('d-none');
                } else {
                    selectPubsubAppElm.classList.add('d-none');
                }
            }

            // Show/hide account type card based on API mode selection
            if (baseScopesAPIElm) {
                if (baseScopesAPIElm.checked) {
                    if (accountTypeCardGmail) {
                        accountTypeCardGmail.classList.remove('d-none');
                    }
                    if (accountTypeCardOutlook) {
                        accountTypeCardOutlook.classList.remove('d-none');
                    }
                } else {
                    if (accountTypeCardGmail) {
                        accountTypeCardGmail.classList.add('d-none');
                    }
                    if (accountTypeCardOutlook) {
                        accountTypeCardOutlook.classList.add('d-none');
                    }
                }
            }

        }

        document.querySelectorAll('.base-scopes-radio').forEach(radioElm => {
            radioElm.addEventListener('change', checkScopesRadio);
            radioElm.addEventListener('click', checkScopesRadio);
        });

        checkScopesRadio();

        /**
         * Filters available Pub/Sub service accounts to only show those matching the selected Google Cloud Project ID.
         * Auto-selects the first matching option if none is currently selected.
         */
        let filterPubSubApps = () => {
            if (!projectIdElm || !pubSubAppElm) {
                return
            }
            let projectId = projectIdElm.value;
            if (projectId) {
                let unselected = !pubSubAppElm.value;
                pubSubAppElm.querySelectorAll('option').forEach(entry => {
                    if (entry.value && entry.dataset.project !== projectId) {
                        entry.disabled = true;
                    } else {
                        entry.disabled = false;
                        if (unselected) {
                            entry.selected = true;
                            unselected = false;
                        }
                    }
                });
            }
        }

        if (projectIdElm && pubSubAppElm) {
            projectIdElm.addEventListener('click', filterPubSubApps)
            projectIdElm.addEventListener('change', filterPubSubApps)
            filterPubSubApps()
        }


        let gmailConfigFileElm = document.getElementById('gmailConfigFile');
        if (gmailConfigFileElm) {
            gmailConfigFileElm.addEventListener('click', e => {
                e.preventDefault();
                browseFileContents('text').then(jsonStr => {
                    if (!jsonStr) {
                        return
                    }

                    let data;
                    try {
                        data = JSON.parse(jsonStr);
                    } catch (err) {
                        return showToast('Selected file is not JSON formatted', 'alert-triangle');
                    }

                    if (!data.web) {
                        return showToast('Selected file is not in a configuration format', 'alert-triangle');
                    }

                    if (!data.web.client_id || !data.web.client_secret) {
                        return showToast('Selected file does not contain required values', 'alert-triangle');
                    }

                    document.getElementById('clientId').value = data.web.client_id;
                    document.getElementById('clientSecret').value = data.web.client_secret;

                    document.getElementById('googleProjectId').value = data.web.project_id || '';

                    let redirectUrlValue = document.getElementById('redirectUrl').value

                    if (data.web.redirect_uris && !data.web.redirect_uris.includes(redirectUrlValue)) {
                        showToast('Provided redirect URI does not match redirect URIs in the configuration file', 'alert-triangle');
                    }

                    filterPubSubApps()

                    return showToast('Loaded configuration values from file', 'check-circle');
                }).catch(err => {
                    console.error(err);
                    return showToast('Failed to load configuration file', 'alert-triangle');
                });
            });
        }

        let authorityElms = document.querySelectorAll('.r-auth');
        let tenantElm = document.getElementById('tenant');
        let checkAuthorityState = () => {
            if (!tenantElm) {
                return
            }

            let showtenant = false;
            for (let aElm of authorityElms) {
                if (aElm.checked) {
                    if (aElm.value === 'tenant') {
                        showtenant = true
                    }
                    break;
                }
            }
            tenantElm.disabled = !showtenant;
            tenantElm.required = showtenant;
        }

        for (let aElm of authorityElms) {
            aElm.addEventListener('click', checkAuthorityState)
            aElm.addEventListener('change', checkAuthorityState)
        }

        checkAuthorityState();

        // Account type helper for API mode
        const accountTypeButtons = document.querySelectorAll('.account-type-btn');
        const extraScopesElm = document.querySelector('textarea#extraScopes');
        const skipScopesElm = document.querySelector('textarea[name="skipScopes"]');
        const setupScopesCard = document.getElementById('setupScopes');
        const skipScopesCard = document.getElementById('skipScopes');

        // Scope configurations
        const scopeConfigs = {
            gmail: {
                normal: {
                    extraScopes: [],
                    skipScopes: []
                },
                readonly: {
                    extraScopes: [
                        'https://www.googleapis.com/auth/gmail.readonly',
                        'https://www.googleapis.com/auth/gmail.labels'
                    ],
                    skipScopes: ['https://www.googleapis.com/auth/gmail.modify']
                },
                readonlysend: {
                    extraScopes: [
                        'https://www.googleapis.com/auth/gmail.readonly',
                        'https://www.googleapis.com/auth/gmail.send',
                        'https://www.googleapis.com/auth/gmail.labels'
                    ],
                    skipScopes: ['https://www.googleapis.com/auth/gmail.modify']
                },
                sendonly: {
                    extraScopes: ['https://www.googleapis.com/auth/gmail.send'],
                    skipScopes: ['https://www.googleapis.com/auth/gmail.modify']
                }
            },
            outlook: {
                normal: {
                    extraScopes: [],
                    skipScopes: []
                },
                readonly: {
                    extraScopes: ['Mail.Read'],
                    skipScopes: ['Mail.ReadWrite', 'Mail.Send']
                },
                readonlysend: {
                    extraScopes: ['Mail.Read'],
                    skipScopes: ['Mail.ReadWrite']
                },
                sendonly: {
                    extraScopes: [],
                    skipScopes: ['Mail.ReadWrite']
                }
            }
        };

        /**
         * Updates the extra and skip scopes textareas based on the selected account type preset.
         * Preserves any third-party scopes that are not managed by the preset configurations.
         *
         * @param {string} provider - The OAuth provider ('gmail' or 'outlook')
         * @param {string} type - The account type ('normal', 'readonly', 'readonlysend', 'sendonly')
         */
        function updateScopesFromAccountType(provider, type) {
            if (!extraScopesElm || !skipScopesElm) {
                return;
            }

            // Get the appropriate config
            let config = scopeConfigs[provider] && scopeConfigs[provider][type];

            if (!config) {
                return;
            }

            // Get current scopes and filter out managed ones
            let currentExtraScopes = extraScopesElm.value.split('\n').map(s => s.trim()).filter(s => s);
            let currentSkipScopes = skipScopesElm.value.split('\n').map(s => s.trim()).filter(s => s);

            // Filter out managed scopes to preserve third-party scopes
            let unmanagedExtraScopes = currentExtraScopes.filter(scope =>
                !managedScopes[provider].extra.includes(scope)
            );
            let unmanagedSkipScopes = currentSkipScopes.filter(scope =>
                !managedScopes[provider].skip.includes(scope)
            );

            // Combine unmanaged scopes with new configuration
            let newExtraScopes = [...config.extraScopes, ...unmanagedExtraScopes];
            let newSkipScopes = [...config.skipScopes, ...unmanagedSkipScopes];

            // Update textarea values
            extraScopesElm.value = newExtraScopes.join('\n');
            skipScopesElm.value = newSkipScopes.join('\n');

            // Expand/collapse sections based on content
            if (newExtraScopes.length > 0) {
                setupScopesCard.classList.add('show');
            } else {
                setupScopesCard.classList.remove('show');
            }

            if (newSkipScopes.length > 0) {
                skipScopesCard.classList.add('show');
            } else {
                skipScopesCard.classList.remove('show');
            }
        }

        // Define which scopes are managed by the helper buttons
        const managedScopes = {
            gmail: {
                extra: [
                    'https://www.googleapis.com/auth/gmail.readonly',
                    'https://www.googleapis.com/auth/gmail.send',
                    'https://www.googleapis.com/auth/gmail.labels'
                ],
                skip: [
                    'https://www.googleapis.com/auth/gmail.modify'
                ]
            },
            outlook: {
                extra: [
                    'Mail.Read'
                ],
                skip: [
                    'Mail.ReadWrite',
                    'Mail.Send'
                ]
            }
        };

        // Attach event listeners to buttons
        for (let btn of accountTypeButtons) {
            btn.addEventListener('click', function () {
                const provider = this.getAttribute('data-provider');
                const type = this.getAttribute('data-type');
                updateScopesFromAccountType(provider, type);
            });
        }

    });


</script>